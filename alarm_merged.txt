Ruta al script: lib/models/alarm.dart
Nombre del script: alarm.dart
Contenido del script:
import 'dart:convert';

class Alarm {
  final String id;
  String name;
  DateTime time;
  bool isEnabled;
  List<bool> weekDays; // [lun, mar, mie, jue, vie, sab, dom]
  bool isOneTime;
  int snoozeTime; // en minutos
  int snoozeCount;
  int maxSnoozeCount;
  String? selectedGame; // 'math' o 'memory'
  String? gameDifficulty; // 'easy', 'medium', 'hard'
  bool requireGame;
  final bool useVibration;
  int totalTimesTriggered;
  int totalTimesStopped;
  int totalTimesSnoozed;
  
  Alarm({
    required this.id,
    this.name = '',
    required this.time,
    this.isEnabled = true,
    List<bool>? weekDays,
    this.isOneTime = false,
    this.snoozeTime = 5,
    this.snoozeCount = 0,
    this.maxSnoozeCount = 3,
    this.selectedGame,
    this.gameDifficulty,
    this.requireGame = false,
    this.useVibration = true,
    this.totalTimesTriggered = 0,
    this.totalTimesStopped = 0,
    this.totalTimesSnoozed = 0,
  }) : weekDays = weekDays ?? List.filled(7, false);

  // Copia del objeto con posibles modificaciones
  Alarm copyWith({
    String? name,
    DateTime? time,
    bool? isEnabled,
    List<bool>? weekDays,
    bool? isOneTime,
    int? snoozeTime,
    int? snoozeCount,
    int? maxSnoozeCount,
    String? selectedGame,
    String? gameDifficulty,
    bool? requireGame,
    bool? useVibration,
  }) {
    return Alarm(
      id: id,
      name: name ?? this.name,
      time: time ?? this.time,
      isEnabled: isEnabled ?? this.isEnabled,
      weekDays: weekDays ?? List.from(this.weekDays),
      isOneTime: isOneTime ?? this.isOneTime,
      snoozeTime: snoozeTime ?? this.snoozeTime,
      snoozeCount: snoozeCount ?? this.snoozeCount,
      maxSnoozeCount: maxSnoozeCount ?? this.maxSnoozeCount,
      selectedGame: selectedGame ?? this.selectedGame,
      gameDifficulty: gameDifficulty ?? this.gameDifficulty,
      requireGame: requireGame ?? this.requireGame,
      useVibration: useVibration ?? this.useVibration,
    );
  }

  // Convertir a Map para almacenamiento
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'time': time.toIso8601String(),
      'isEnabled': isEnabled,
      'weekDays': weekDays,
      'isOneTime': isOneTime,
      'snoozeTime': snoozeTime,
      'snoozeCount': snoozeCount,
      'maxSnoozeCount': maxSnoozeCount,
      'selectedGame': selectedGame,
      'gameDifficulty': gameDifficulty,
      'requireGame': requireGame,
      'useVibration': useVibration,
      'totalTimesTriggered': totalTimesTriggered,
      'totalTimesStopped': totalTimesStopped,
      'totalTimesSnoozed': totalTimesSnoozed,
    };
  }

  // Crear objeto desde Map
  factory Alarm.fromJson(Map<String, dynamic> json) {
    return Alarm(
      id: json['id'],
      name: json['name'],
      time: DateTime.parse(json['time']),
      isEnabled: json['isEnabled'],
      weekDays: List<bool>.from(json['weekDays']),
      isOneTime: json['isOneTime'],
      snoozeTime: json['snoozeTime'],
      snoozeCount: json['snoozeCount'],
      maxSnoozeCount: json['maxSnoozeCount'],
      selectedGame: json['selectedGame'],
      gameDifficulty: json['gameDifficulty'],
      requireGame: json['requireGame'],
      useVibration: json['useVibration'] ?? true,
      totalTimesTriggered: json['totalTimesTriggered'] ?? 0,
      totalTimesStopped: json['totalTimesStopped'] ?? 0,
      totalTimesSnoozed: json['totalTimesSnoozed'] ?? 0,
    );
  }

  // Convertir a String para almacenamiento
  String toJsonString() => jsonEncode(toJson());

  // Crear objeto desde String
  factory Alarm.fromJsonString(String jsonString) {
    return Alarm.fromJson(jsonDecode(jsonString));
  }

  // Obtener próxima fecha de alarma
  DateTime getNextAlarmTime() {
    if (isOneTime) {
      return time.isBefore(DateTime.now()) ? time.add(const Duration(days: 1)) : time;
    }

    DateTime now = DateTime.now();
    DateTime candidate = DateTime(
      now.year,
      now.month,
      now.day,
      time.hour,
      time.minute,
    );

    // Si la hora ya pasó hoy, empezar a buscar desde mañana
    if (candidate.isBefore(now)) {
      candidate = candidate.add(const Duration(days: 1));
    }

    // Buscar el próximo día activo
    for (int i = 0; i < 7; i++) {
      int weekday = candidate.weekday - 1; // 0 = Lunes, 6 = Domingo
      if (weekDays[weekday]) {
        return candidate;
      }
      candidate = candidate.add(const Duration(days: 1));
    }

    // Si no hay días activos, retornar null o lanzar una excepción
    throw Exception('No active days set for alarm');
  }

  // Verificar si la alarma debe sonar en un día específico
  bool shouldRingOn(DateTime date) {
    if (isOneTime) {
      return date.year == time.year &&
             date.month == time.month &&
             date.day == time.day;
    }
    return weekDays[date.weekday - 1];
  }

  // Activar/desactivar la alarma
  void toggleEnabled() {
    isEnabled = !isEnabled;
  }

  // Registrar un snooze
  bool canSnooze() {
    return snoozeCount < maxSnoozeCount;
  }

  void incrementSnoozeCount() {
    if (canSnooze()) {
      snoozeCount++;
    }
  }

  void resetSnoozeCount() {
    snoozeCount = 0;
  }

  // Obtener tiempo hasta la próxima alarma en minutos
  int getTimeToAlarmInMinutes() {
    final nextAlarm = getNextAlarmTime();
    return nextAlarm.difference(DateTime.now()).inMinutes;
  }
}

--------------------------------------------------

Ruta al script: lib/screens/alarm_list_screen.dart
Nombre del script: alarm_list_screen.dart
Contenido del script:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:the_good_alarm/widgets/intervalos.dart';
import '../models/time_interval_settings.dart';
import '../services/alarm_service.dart';
import '../models/alarm.dart';
import 'alarm_edit_screen.dart';

class AlarmListScreen extends StatefulWidget {
  const AlarmListScreen({super.key});

  @override
  State<AlarmListScreen> createState() => _AlarmListScreenState();
}

class _AlarmListScreenState extends State<AlarmListScreen> {
  late TimeIntervalSettings _intervalSettings;

  @override
  void initState() {
    super.initState();
    _loadIntervalSettings();
  }

  Future<void> _loadIntervalSettings() async {
    final settings = await TimeIntervalSettings.load();
    setState(() {
      _intervalSettings = settings;
    });
  }

  String _formatTimeOfDay(TimeOfDay time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }

  List<Alarm> _filterAlarmsByInterval(
      List<Alarm> alarms, TimeOfDay start, TimeOfDay end) {
    return alarms.where((alarm) {
      final alarmTime = TimeOfDay.fromDateTime(alarm.time);
      return _isTimeInInterval(alarmTime, start, end);
    }).toList();
  }

  bool _isTimeInInterval(TimeOfDay time, TimeOfDay start, TimeOfDay end) {
    final startMinutes = start.hour * 60 + start.minute;
    final endMinutes = end.hour * 60 + end.minute;
    final timeMinutes = time.hour * 60 + time.minute;

    // Manejar caso de intervalo que cruza la media noche
    if (endMinutes < startMinutes) {
      return timeMinutes >= startMinutes || timeMinutes <= endMinutes;
    }

    return timeMinutes >= startMinutes && timeMinutes <= endMinutes;
  }

  @override
  Widget build(BuildContext context) {
    final alarmService = Provider.of<AlarmService>(context, listen: false);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Todas las Alarmas'),
        actions: [
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: _showIntervalConfigModal,
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: () async {
          await alarmService.initialize();
        },
        child: StreamBuilder<List<Alarm>>(
          stream: alarmService.alarmsStream,
          initialData: alarmService.alarms,
          builder: (context, snapshot) {
        // child: Consumer<AlarmService>(
          // builder: (context, alarmService, child) {
            final alarms = alarmService.alarms;
            final morningAlarms = _filterAlarmsByInterval(alarms,
                _intervalSettings.morningStart, _intervalSettings.morningEnd);
            final afternoonAlarms = _filterAlarmsByInterval(
                alarms,
                _intervalSettings.afternoonStart,
                _intervalSettings.afternoonEnd);
            final nightAlarms = _filterAlarmsByInterval(alarms,
                _intervalSettings.nightStart, _intervalSettings.nightEnd);

            // Verificar si no hay alarmas en absoluto
            if (alarms.isEmpty) {
              return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.alarm_off,
                      size: 64,
                      color: Theme.of(context)
                          .colorScheme
                          .primary
                          .withOpacity(0.5),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'No hay alarmas',
                      style: Theme.of(context).textTheme.titleLarge,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Crea tu primera alarma',
                      style: Theme.of(context).textTheme.bodyMedium,
                    ),
                  ],
                ),
              );
            }

            return ListView(
              children: [
                _buildAlarmSection('Mañana', morningAlarms,
                    '${_formatTimeOfDay(_intervalSettings.morningStart)} - ${_formatTimeOfDay(_intervalSettings.morningEnd)}'),
                _buildAlarmSection('Tarde', afternoonAlarms,
                    '${_formatTimeOfDay(_intervalSettings.afternoonStart)} - ${_formatTimeOfDay(_intervalSettings.afternoonEnd)}'),
                _buildAlarmSection('Noche', nightAlarms,
                    '${_formatTimeOfDay(_intervalSettings.nightStart)} - ${_formatTimeOfDay(_intervalSettings.nightEnd)}'),
              ],
            );
          },
        ),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => _navigateToAlarmEdit(context),
        icon: const Icon(Icons.add),
        label: const Text('Nueva Alarma'),
      ),
    );
  }

  Widget _buildAlarmSection(
      String title, List<Alarm> alarms, String timeInterval) {
    return ExpansionTile(
      title: Row(
        children: [
          Text(title),
          const SizedBox(width: 10),
          Text(
            timeInterval,
            style: const TextStyle(
              fontSize: 12,
              color: Colors.grey,
            ),
          ),
        ],
      ),
      initiallyExpanded: true,
      children: alarms.isEmpty
          ? [const ListTile(title: Text('No hay alarmas'))]
          : alarms.map((alarm) => _buildAlarmTile(alarm)).toList(),
    );
  }

  Widget _buildAlarmTile(Alarm alarm) {
    return ListTile(
      title: Text(alarm.name.isEmpty ? 'Alarma' : alarm.name),
      subtitle: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '${alarm.time.hour.toString().padLeft(2, '0')}:${alarm.time.minute.toString().padLeft(2, '0')}',
            style: const TextStyle(fontWeight: FontWeight.bold),
          ),
          Text(
            alarm.isOneTime ? 'Una vez' : 'Repetir',
            style: TextStyle(
              color: alarm.isOneTime ? Colors.red : Colors.green,
              fontSize: 12,
            ),
          ),
        ],
      ),
      trailing: Switch(
        value: alarm.isEnabled,
        onChanged: (_) => _toggleAlarm(alarm),
      ),
      onTap: () => _showAlarmOptions(alarm),
    );
  }

  void _showAlarmOptions(Alarm alarm) {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return SafeArea(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: <Widget>[
              ListTile(
                leading: const Icon(Icons.edit),
                title: const Text('Editar'),
                onTap: () {
                  Navigator.pop(context);
                  _navigateToAlarmEdit(context, alarm);
                },
              ),
              ListTile(
                leading: const Icon(Icons.delete),
                title: const Text('Eliminar'),
                onTap: () {
                  Navigator.pop(context);
                  _confirmDeleteAlarm(alarm);
                },
              ),
            ],
          ),
        );
      },
    );
  }

  void _confirmDeleteAlarm(Alarm alarm) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Eliminar Alarma'),
          content: const Text('¿Estás seguro de eliminar esta alarma?'),
          actions: <Widget>[
            TextButton(
              child: const Text('Cancelar'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              child: const Text('Eliminar'),
              onPressed: () {
                final alarmService =
                    Provider.of<AlarmService>(context, listen: false);
                alarmService.deleteAlarm(alarm.id);
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void _toggleAlarm(Alarm alarm) {
    final alarmService = Provider.of<AlarmService>(context, listen: false);
    alarmService.toggleAlarm(alarm.id);
  }

  void _navigateToAlarmEdit(BuildContext context, [Alarm? alarm]) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => AlarmEditScreen(alarm: alarm),
      ),
    );
  }

  void _showIntervalConfigModal() {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return IntervalConfigWidget(
          initialSettings: _intervalSettings,
          onSave: (settings) {
            setState(() {
              _intervalSettings = settings;
            });
            settings.save();
            Navigator.pop(context);
          },
        );
      },
    );
  }
}


--------------------------------------------------

Ruta al script: lib/services/alarm_service.dart
Nombre del script: alarm_service.dart
Contenido del script:
import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:the_good_alarm/models/alarm_history_entry.dart';
import '../models/alarm.dart';
import 'notification_service.dart';
import 'package:the_good_alarm/services/alarm_history_service.dart';

class AlarmService {
  static final AlarmService _instance = AlarmService._internal();
  factory AlarmService() => _instance;
  AlarmService._internal() {
    _initializeStream();
  }

  static const String _storageKey = 'alarms';
  final NotificationService _notificationService = NotificationService();
  late SharedPreferences _prefs;
  List<Alarm> _alarms = [];

  // Usar un BehaviorSubject para mantener el último estado
  late StreamController<List<Alarm>> _alarmsController =
      StreamController<List<Alarm>>.broadcast();
  Stream<List<Alarm>> get alarmsStream => _alarmsController.stream;

  // Stream específico para alarmas activas
  Stream<List<Alarm>> get activeAlarmsStream => alarmsStream
      .map((allAlarms) => allAlarms.where((alarm) => alarm.isEnabled).toList());

  // Getter para la lista de alarmas
  List<Alarm> get alarms => List.unmodifiable(_alarms);

  // Getter para alarmas activas
  List<Alarm> get activeAlarms =>
      _alarms.where((alarm) => alarm.isEnabled).toList();

  final AlarmHistoryService _alarmHistoryService = AlarmHistoryService();

  Future<void> initialize() async {
    try {
      _prefs = await SharedPreferences.getInstance();
      await _loadAlarms();
    } catch (e) {
      debugPrint('Error inicializando AlarmService: $e');
      _notifyListeners(); // Notificar incluso en caso de error
    }
  }

  void _initializeStream() {
    if (_alarmsController.isClosed) {
      _alarmsController = StreamController<List<Alarm>>.broadcast();
    }
  }

  void _notifyListeners() {
    if (!_alarmsController.isClosed) {
      _alarmsController.add(List.unmodifiable(_alarms));
    }
  }

  Future<void> _loadAlarms() async {
    try {
      final String? alarmsJson = _prefs.getString(_storageKey);
      if (alarmsJson != null) {
        final List<dynamic> alarmsList = jsonDecode(alarmsJson);
        _alarms = alarmsList.map((json) => Alarm.fromJson(json)).toList();

        // Reprogramar alarmas activas
        for (final alarm in _alarms) {
          if (alarm.isEnabled) {
            await _notificationService.scheduleAlarm(alarm);
          }
        }
      } else {
        _alarms = [];
      }

      _notifyListeners();
    } catch (e) {
      debugPrint('Error al cargar alarmas: $e');
      _alarms = [];
      _notifyListeners();
    }
  }

  Future<void> _saveAlarms() async {
    try {
      final String alarmsJson =
          jsonEncode(_alarms.map((a) => a.toJson()).toList());
      await _prefs.setString(_storageKey, alarmsJson);
      _notifyListeners();
    } catch (e) {
      debugPrint('Error al guardar alarmas: $e');
    }
  }

  Future<void> addAlarm(Alarm alarm) async {
    _alarms.add(alarm);
    // Registrar evento de creación
    await _alarmHistoryService.addHistoryEntry(
      AlarmHistoryEntry(
        alarmId: alarm.id,
        timestamp: DateTime.now(),
        eventType: AlarmEventType.created,
      ),
    );

    if (alarm.isEnabled) {
      await _notificationService.scheduleAlarm(alarm);
    }
    await _saveAlarms();
  }

  Future<void> updateAlarm(Alarm alarm) async {
    final index = _alarms.indexWhere((a) => a.id == alarm.id);
    if (index != -1) {
      await _notificationService.cancelAlarm(_alarms[index].id);
      _alarms[index] = alarm;
      if (alarm.isEnabled) {
        await _notificationService.scheduleAlarm(alarm);
      }
      await _saveAlarms();
    }
  }

  Future<void> deleteAlarm(String alarmId) async {
    await _notificationService.cancelAlarm(alarmId);
    _alarms.removeWhere((a) => a.id == alarmId);
    await _saveAlarms();
  }

  Future<void> toggleAlarm(String alarmId) async {
    final index = _alarms.indexWhere((a) => a.id == alarmId);
    if (index != -1) {
      _alarms[index] = _alarms[index].copyWith(
        isEnabled: !_alarms[index].isEnabled,
      );

      if (_alarms[index].isEnabled) {
        await _notificationService.scheduleAlarm(_alarms[index]);
      } else {
        await _notificationService.cancelAlarm(alarmId);
      }

      await _saveAlarms();
      _notifyListeners();
    }
  }

  Future<void> snoozeAlarm(String alarmId) async {
    final alarm = _alarms.firstWhere((a) => a.id == alarmId);
    if (alarm.canSnooze()) {
      alarm.incrementSnoozeCount();
      alarm.totalTimesSnoozed++;

      await _alarmHistoryService.addHistoryEntry(
        AlarmHistoryEntry(
          alarmId: alarmId,
          timestamp: DateTime.now(),
          eventType: AlarmEventType.snoozed,
          metadata: {
            'snoozeCount': alarm.snoozeCount,
          },
        ),
      );

      final DateTime newTime =
          DateTime.now().add(Duration(minutes: alarm.snoozeTime));
      await _notificationService.cancelAlarm(alarmId);
      await _notificationService.scheduleAlarm(alarm.copyWith(time: newTime));
      await _saveAlarms();
    }
  }

  Future<void> stopAlarm(String alarmId) async {
    final alarm = _alarms.firstWhere((a) => a.id == alarmId);
    await _notificationService.cancelAlarm(alarmId);
    alarm.resetSnoozeCount();
    if (!alarm.isOneTime) {
      await _notificationService.scheduleAlarm(alarm);
    }
    await _saveAlarms();
  }

  List<Alarm> getActiveAlarms() {
    return _alarms.where((alarm) => alarm.isEnabled).toList();
  }

  List<Alarm> getAlarmsForDay(DateTime date) {
    return _alarms
        .where((alarm) => alarm.isEnabled && alarm.shouldRingOn(date))
        .toList();
  }

  void dispose() {
    _alarmsController.close();
  }
}


--------------------------------------------------

Ruta al script: lib/widgets/alarm_list_item.dart
Nombre del script: alarm_list_item.dart
Contenido del script:
import 'package:flutter/material.dart';
import '../models/alarm.dart';

class AlarmListItem extends StatelessWidget {
  final Alarm alarm;
  final VoidCallback onTap;
  final Function(bool) onToggle;
  final VoidCallback onDelete;

  const AlarmListItem({
    super.key,
    required this.alarm,
    required this.onTap,
    required this.onToggle,
    required this.onDelete,
  });

  @override
  Widget build(BuildContext context) {
    return Dismissible(
      key: Key(alarm.id),
      direction: DismissDirection.endToStart,
      background: Container(
        alignment: Alignment.centerRight,
        padding: const EdgeInsets.only(right: 20.0),
        color: Colors.red,
        child: const Icon(
          Icons.delete,
          color: Colors.white,
        ),
      ),
      onDismissed: (_) => onDelete(),
      child: ListTile(
        onTap: onTap,
        leading: _buildTimeDisplay(context),
        title: Text(
          alarm.name.isEmpty ? 'Alarma' : alarm.name,
          style: Theme.of(context).textTheme.titleMedium,
        ),
        subtitle: _buildSubtitle(context),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (alarm.requireGame)
              Padding(
                padding: const EdgeInsets.only(right: 8.0),
                child: Icon(
                  _getGameIcon(),
                  size: 20,
                  color: Theme.of(context).colorScheme.primary,
                ),
              ),
            Switch(
              value: alarm.isEnabled,
              onChanged: onToggle,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTimeDisplay(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.primaryContainer,
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            _formatTime(alarm.time),
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Theme.of(context).colorScheme.onPrimaryContainer,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSubtitle(BuildContext context) {
    final TextStyle subtitleStyle = Theme.of(context).textTheme.bodySmall!;
    
    if (alarm.isOneTime) {
      return Text(
        'Una vez',
        style: subtitleStyle,
      );
    }

    final List<String> days = ['L', 'M', 'M', 'J', 'V', 'S', 'D'];
    final List<Widget> dayWidgets = [];

    for (int i = 0; i < 7; i++) {
      dayWidgets.add(
        Text(
          days[i],
          style: subtitleStyle.copyWith(
            color: alarm.weekDays[i]
                ? Theme.of(context).colorScheme.primary
                : subtitleStyle.color,
            fontWeight: alarm.weekDays[i] ? FontWeight.bold : FontWeight.normal,
          ),
        ),
      );

      if (i < 6) {
        dayWidgets.add(const Text(' · '));
      }
    }

    return Row(
      children: dayWidgets,
    );
  }

  String _formatTime(DateTime time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }

  IconData _getGameIcon() {
    if (alarm.selectedGame == 'math') {
      return Icons.calculate;
    } else if (alarm.selectedGame == 'memory') {
      return Icons.grid_view;
    }
    return Icons.games;
  }
}

// Widget de ejemplo para el badge de dificultad
class DifficultyBadge extends StatelessWidget {
  final String difficulty;
  final Color? backgroundColor;
  final Color? textColor;

  const DifficultyBadge({
    super.key,
    required this.difficulty,
    this.backgroundColor,
    this.textColor,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final effectiveBackgroundColor = backgroundColor ?? theme.colorScheme.secondary;
    final effectiveTextColor = textColor ?? theme.colorScheme.onSecondary;

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
      decoration: BoxDecoration(
        color: effectiveBackgroundColor,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        difficulty,
        style: TextStyle(
          color: effectiveTextColor,
          fontSize: 12,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}


--------------------------------------------------

